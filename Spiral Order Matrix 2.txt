Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.

 

Example 1:


Input: n = 3
Output: [[1,2,3],[8,9,4],[7,6,5]]
Example 2:

Input: n = 1
Output: [[1]]
 

Constraints:

1 <= n <= 20

# Code
```
class Solution {
public:
    vector<vector<int>> generateMatrix(int n) {

      
vector<vector<int>> ans(n, vector<int>(n));

if(n == 1)
{
ans[0][0] = 1;
return ans;
}

int i = 0;
int j = 0;
int x = 1;

while(n > 1)
{
//first row ie when i = 0.
for(int k=0; k<n-1; k++)
{
ans[i][j] = x;
j++;
x++;
}

//last col when j = n-1.
for(int k=0; k<n-1; k++)
{
ans[i][j] = x;
i++;
x++;
}

//last row when i = n-1.
for(int k=0; k<n-1; k++)
{
ans[i][j] = x;
j--;
x++;
}

//first col when j = 0.
for(int k=0; k<n-1; k++)
{
ans[i][j] = x;
i--;
x++;
}

i++;
j++;
n = n-2; // coz for each iteration it prints two rows and two cols.

//if n is odd then there'll be a element left, so to add then leftover element.
if(n == 1)
ans[i][j] = x;

}
return ans;
        
    }
};
```
