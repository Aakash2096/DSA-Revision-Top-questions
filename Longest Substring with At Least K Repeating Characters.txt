395. Longest Substring with At Least K Repeating Characters
Solved
Medium
Topics
Companies
Given a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is greater than or equal to k.

if no such substring exists, return 0.

 

Example 1:

Input: s = "aaabb", k = 3
Output: 3
Explanation: The longest substring is "aaa", as 'a' is repeated 3 times.
Example 2:

Input: s = "ababbc", k = 2
Output: 5
Explanation: The longest substring is "ababb", as 'a' is repeated 2 times and 'b' is repeated 3 times.
 

Constraints:

1 <= s.length <= 104
s consists of only lowercase English letters.
1 <= k <= 105
















// Naive solution


class Solution {
public:
    int longestSubstring(string s, int k) {

        int n = s.size();
    int maxLength = 0;

    for (int i = 0; i < n; ++i) {
        for (int j = i; j < n; ++j) {
            // Step 1: Generate all possible substrings
            string substring = s.substr(i, j - i + 1);

            // Step 2: Check each substring for character frequency
            unordered_map<char, int> frequencyMap;
            for (char c : substring) {
                frequencyMap[c]++;
            }

            // Step 3: Check if all characters meet the condition
            bool allMeetCondition = true;
            for (const auto& pair : frequencyMap) {
                if (pair.second < k) {
                    allMeetCondition = false;
                    break;
                }
            }

            // Step 4: Update the longest substring
            if (allMeetCondition) {
                maxLength = max(maxLength, j - i + 1);
            }
        }
    }

    return maxLength;

        
    }
};


