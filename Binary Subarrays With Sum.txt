Given a binary array nums and an integer goal, return the number of non-empty subarrays with a sum goal.

A subarray is a contiguous part of the array.

 

Example 1:

Input: nums = [1,0,1,0,1], goal = 2
Output: 4
Explanation: The 4 subarrays are bolded and underlined below:
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]
Example 2:

Input: nums = [0,0,0,0,0], goal = 0
Output: 15
 

Constraints:

1 <= nums.length <= 3 * 104
nums[i] is either 0 or 1.
0 <= goal <= nums.length


class Solution {
public:
    int atMost(vector<int>& A, int goal) {
        if (goal < 0) return 0;
        int l = 0, r = 0, sum = 0, count = 0, size = A.size();
        
        while (r < size) {
            sum += A[r];
            while (sum > goal) {
                sum -= A[l];
                l++;
            }
            count += r - l + 1;
            r++;
        }
        
        return count;
    }
    
    int numSubarraysWithSum(vector<int>& A, int goal) {
        return atMost(A, goal) - atMost(A, goal - 1);
    }
};

/*
Explanation
Function atMost:

This function returns the number of subarrays with a sum at most equal to the given goal.
We use two pointers l and r to form the window and adjust the window to maintain the sum within the goal.
sum keeps the current sum of the window, and count accumulates the number of valid subarrays ending at each position r.
Function numSubarraysWithSum:

This function calculates the difference between the number of subarrays with a sum at most goal and the number of subarrays with a sum at most goal - 1.
The difference gives us the number of subarrays with an exact sum equal to goal.8*/